<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/00_Scripts/Runtime/GameManager/PlayerManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/00_Scripts/Runtime/GameManager/PlayerManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;&#10;namespace MortierFu&#10;{&#10;    public class PlayerManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Setup&quot;)]&#10;        public GameObject _playerInGamePrefab; // le perso à spawn pendant la partie&#10;&#10;        private PlayerInput _playerInput;&#10;        private GameObject _inGameCharacter;&#10;        private bool _isInGame = false;&#10;&#10;        public PlayerInput PlayerInput =&gt; _playerInput;&#10;        public GameObject CharacterGO =&gt; _inGameCharacter;&#10;        &#10;        void Awake()&#10;        {&#10;            _playerInput = GetComponent&lt;PlayerInput&gt;();&#10;            DontDestroyOnLoad(gameObject); // garde la référence entre les scènes&#10;        }&#10;&#10;        private void Start()&#10;        {&#10;            GM_Base.Instance.RegisterPlayer(_playerInput);&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            GM_Base.Instance.UnregisterPlayer(_playerInput);&#10;        }&#10;&#10;        // Appelée depuis le GameManager quand on entre dans la GameScene&#10;        public void SpawnInGame(Vector3 spawnPosition)&#10;        {&#10;            if (_isInGame) return;&#10;            &#10;            _inGameCharacter.SetActive(true);&#10;            _inGameCharacter.transform.position = spawnPosition;&#10;            if (_inGameCharacter.TryGetComponent(out Character character) &amp;&amp; character.Health != null)&#10;            {&#10;                character.Health.ResetHealth();&#10;            }&#10;            _isInGame = true;&#10;        }&#10;&#10;        public void InitializePlayer()&#10;        {&#10;            if (_isInGame) return;&#10;&#10;            var newPlayer = PlayerInput.Instantiate(&#10;                _playerInGamePrefab,&#10;                controlScheme: _playerInput.currentControlScheme,&#10;                pairWithDevice: _playerInput.devices[0]&#10;            );&#10;            &#10;            _inGameCharacter = newPlayer.gameObject;&#10;        }&#10;        &#10;        public void DespawnInGame()&#10;        {&#10;            if (_inGameCharacter != null)&#10;            {&#10;                _inGameCharacter.SetActive(false);&#10;            }&#10;            &#10;            _isInGame = false;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;&#10;namespace MortierFu&#10;{&#10;    public class PlayerManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Setup&quot;)]&#10;        public GameObject _playerInGamePrefab; // le perso à spawn pendant la partie&#10;&#10;        private PlayerInput _playerInput;&#10;        private GameObject _inGameCharacter;&#10;        private bool _isInGame = false;&#10;&#10;        public PlayerInput PlayerInput =&gt; _playerInput;&#10;        public GameObject CharacterGO =&gt; _inGameCharacter;&#10;        &#10;        void Awake()&#10;        {&#10;            _playerInput = GetComponent&lt;PlayerInput&gt;();&#10;            DontDestroyOnLoad(gameObject); // garde la référence entre les scènes&#10;        }&#10;&#10;        private void Start()&#10;        {&#10;            GM_Base.Instance.RegisterPlayer(_playerInput);&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            GM_Base.Instance.UnregisterPlayer(_playerInput);&#10;        }&#10;&#10;        // Appelée depuis le GameManager quand on entre dans la GameScene&#10;        public void SpawnInGame(Vector3 spawnPosition)&#10;        {&#10;            if (_isInGame) return;&#10;            &#10;            _inGameCharacter.SetActive(true);&#10;            _inGameCharacter.transform.position = spawnPosition;&#10;            if (_inGameCharacter.TryGetComponent(out Character character) &amp;&amp; character.Health != null)&#10;            {&#10;                character.Health.ResetHealth();&#10;            }&#10;            _isInGame = true;&#10;        }&#10;&#10;        public void InitializePlayer()&#10;        {&#10;            if (_isInGame) return;&#10;&#10;            var newPlayer = PlayerInput.Instantiate(&#10;                _playerInGamePrefab,&#10;                controlScheme: _playerInput.currentControlScheme,&#10;                pairWithDevice: _playerInput.devices[0]&#10;            );&#10;            &#10;            _inGameCharacter = newPlayer.gameObject;&#10;        }&#10;        &#10;        public void DespawnInGame()&#10;        {&#10;            if (_inGameCharacter != null)&#10;            {&#10;                _inGameCharacter.SetActive(false);&#10;            }&#10;            &#10;            _isInGame = false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>